<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.RepairMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.common.domain.Repair">
    <id column="rid" jdbcType="INTEGER" property="rid" />
    <result column="did" jdbcType="INTEGER" property="did" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="date" jdbcType="DATE" property="date" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.demo.common.domain.Repair">
    <result column="info" jdbcType="LONGVARCHAR" property="info" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    rid, did, state, date
  </sql>
  <sql id="Blob_Column_List">
    info
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.demo.common.domain.RepairExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repairs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.demo.common.domain.RepairExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from repairs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from repairs
    where rid = #{rid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from repairs
    where rid = #{rid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.common.domain.RepairExample">
    delete from repairs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.common.domain.Repair">
    insert into repairs (rid, did, state, 
      date, info)
    values (#{rid,jdbcType=INTEGER}, #{did,jdbcType=INTEGER}, #{state,jdbcType=VARCHAR}, 
      #{date,jdbcType=DATE}, #{info,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.common.domain.Repair">
    insert into repairs
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="rid != null">
        rid,
      </if>
      <if test="did != null">
        did,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="info != null">
        info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="rid != null">
        #{rid,jdbcType=INTEGER},
      </if>
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=DATE},
      </if>
      <if test="info != null">
        #{info,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.common.domain.RepairExample" resultType="java.lang.Long">
    select count(*) from repairs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update repairs
    <set>
      <if test="record.rid != null">
        rid = #{record.rid,jdbcType=INTEGER},
      </if>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update repairs
    set rid = #{record.rid,jdbcType=INTEGER},
      did = #{record.did,jdbcType=INTEGER},
      state = #{record.state,jdbcType=VARCHAR},
      date = #{record.date,jdbcType=DATE},
      info = #{record.info,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update repairs
    set rid = #{record.rid,jdbcType=INTEGER},
      did = #{record.did,jdbcType=INTEGER},
      state = #{record.state,jdbcType=VARCHAR},
      date = #{record.date,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.common.domain.Repair">
    update repairs
    <set>
      <if test="did != null">
        did = #{did,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=DATE},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where rid = #{rid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.demo.common.domain.Repair">
    update repairs
    set did = #{did,jdbcType=INTEGER},
      state = #{state,jdbcType=VARCHAR},
      date = #{date,jdbcType=DATE},
      info = #{info,jdbcType=LONGVARCHAR}
    where rid = #{rid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.common.domain.Repair">
    update repairs
    set did = #{did,jdbcType=INTEGER},
      state = #{state,jdbcType=VARCHAR},
      date = #{date,jdbcType=DATE}
    where rid = #{rid,jdbcType=INTEGER}
  </update>
</mapper>